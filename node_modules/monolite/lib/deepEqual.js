'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var arrayEqual = function arrayEqual(a, b) {
    if (a.length !== b.length) return false;
    for (var index in a) {
        if (!deepEqual(a[index], b[index])) return false;
    }return true;
};
var objectEqual = function objectEqual(a, b) {
    var propsA = Object.getOwnPropertyNames(a);
    var propsB = Object.getOwnPropertyNames(b);
    if (propsA.length !== propsB.length) return false;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = propsA[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prop = _step.value;

            if (!Object.prototype.hasOwnProperty.call(b, prop) || !deepEqual(a[prop], b[prop])) return false;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return true;
};
var deepEqual = function deepEqual(a, b) {
    if (a === b) return true;
    if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== (typeof b === 'undefined' ? 'undefined' : _typeof(b))) return false;
    if (Array.isArray(a)) return arrayEqual(a, b);
    if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') return objectEqual(a, b);
    return a.valueOf() === b.valueOf();
};
exports.default = deepEqual;