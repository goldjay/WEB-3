'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setFilter = exports.setPrepend = exports.setAppend = exports.setMap = exports.set = exports.setFromAccessorChain = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _deepEqual = require('./deepEqual');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _accessorChain = require('./accessorChain');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var setFromAccessorChain = exports.setFromAccessorChain = function setFromAccessorChain(root, accessors) {
    return function (value) {
        var currentNode = root;
        if (accessors.length === 0) {
            var newNode = value instanceof Function ? value(currentNode) : value;
            return (0, _deepEqual2.default)(currentNode, newNode) ? currentNode : newNode;
        } else {
            var _accessors = _toArray(accessors),
                key = _accessors[0],
                nextAccessors = _accessors.slice(1);

            var newValue = setFromAccessorChain(currentNode[key], nextAccessors)(value);
            return currentNode[key] === newValue ? currentNode : Array.isArray(currentNode) ? [].concat(_toConsumableArray(currentNode.slice(0, Number(key))), [newValue], _toConsumableArray(currentNode.slice(Number(key) + 1))) : _extends({}, currentNode, _defineProperty({}, key, newValue));
        }
    };
};
var set = exports.set = function set(root, accessor) {
    return Array.isArray(accessor) ? setFromAccessorChain(root, accessor) : setFromAccessorChain(root, (0, _accessorChain.getAccessorChain)(accessor));
};
var setMap = exports.setMap = function setMap(root, accessor) {
    return function (func) {
        return set(root, accessor)(function (arr) {
            return arr.map(func);
        });
    };
};
var setAppend = exports.setAppend = function setAppend(root, accessor) {
    return function (item) {
        return set(root, accessor)(function (arr) {
            return [].concat(_toConsumableArray(arr), [item]);
        });
    };
};
var setPrepend = exports.setPrepend = function setPrepend(root, accessor) {
    return function (item) {
        return set(root, accessor)(function (arr) {
            return [item].concat(_toConsumableArray(arr));
        });
    };
};
var setFilter = exports.setFilter = function setFilter(root, accessor) {
    return function (predicate) {
        return set(root, accessor)(function (arr) {
            return arr.filter(predicate);
        });
    };
};