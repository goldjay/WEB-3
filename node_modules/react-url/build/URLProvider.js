'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

const propTypes = {
  urls: _react.PropTypes.object,
  children: _react.PropTypes.element.isRequired
};
const defaultProps = {
  urls: {}
};
const childContextTypes = {
  urls: _react.PropTypes.object
};

/**
 * Set URLs object to React application context
 * @param   {Object} urls     URL to set
 * @param   {Class}  children Application component
 */

let UrlProvider = function (_Component) {
  _inherits(UrlProvider, _Component);

  function UrlProvider() {
    _classCallCheck(this, UrlProvider);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(UrlProvider).apply(this, arguments));
  }

  _createClass(UrlProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        urls: this.props.urls
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return _react.Children.only(this.props.children);
    }
  }]);

  return UrlProvider;
}(_react.Component);

UrlProvider.propTypes = propTypes;
UrlProvider.defaultProps = defaultProps;
UrlProvider.childContextTypes = childContextTypes;

exports.default = UrlProvider;