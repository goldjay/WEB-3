'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const contextTypes = {
  urls: _react.PropTypes.object
};

/**
 * Create decorator to connect a React component to the URLs
 * @param   {Function} mapURLToProps Map function for URLs
 * @returns {Function}               Decorator function
 */
function connectURL() {
  let mapURLToProps = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

  /**
   * URL decorator function
   * @param   {Class} Target Component to decorate
   * @returns {Class}        Decorated component
   */
  function decorator(Target) {
    /**
     * Wrapper component
     * @param   {Object} props   Component properties
     * @param   {Object} context Application context
     * @returns {VDOM}           Rendered component
     */
    function Connected(props, context) {
      /**
       * Get specified URL given the received options
       * @param   {String} name URL name
       * @param   {Object} opts URL parameters
       * @returns {String}      Parsed URL
       */
      function getURL(name) {
        let opts = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

        return (0, _parser2.default)(context.urls, name, opts);
      }

      /**
       * Get mapped (or not) properties
       * @returns {Object} Child properties
       */
      function getProps() {
        if (mapURLToProps) {
          return _extends(mapURLToProps(getURL, props), props);
        }
        return _extends({}, props, { getURL });
      }

      return (0, _react.createFactory)(Target)(getProps());
    }

    Connected.contextTypes = contextTypes;

    return Connected;
  }

  return decorator;
}

exports.default = connectURL;